pipeline {
  agent {
    docker {
      image 'sreejitheyne/jenkinsagent_maven_java17_docker:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/sreejithlalu/Springboot-App-Java.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://51.20.76.56:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "sreejitheyne/springboot:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "Dockerfile"
        REGISTRY_CREDENTIALS = credentials('Docker_Cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "Docker_Cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Springboot-App-Java"
            GIT_USER_NAME = "sreejithlalu"
        }
        steps {
            withCredentials([string(credentialsId: 'Github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                         echo "Working Directory: $(pwd)"
                    ls -la
    
                    cd "$WORKSPACE" || exit 1

                     # Fix ownership if needed
                     chown -R root:root .
    
                     # Check if .git exists
                     if [ ! -d ".git" ]; then
                     echo "Error: .git directory not found. Make sure this is a cloned Git repository."
                     exit 1
                     fi

    
                    # Configure Git
                    git config user.email "sreejitheyne@gmail.com"
                    git config user.name "Sreejith Lalu C"
    
                    # Replace the image tag in deployment file
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml

                    git add deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
